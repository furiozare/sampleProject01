<?php

namespace AppBundle\Repository;

use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\QueryBuilder;

/**
 * ArtikelRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArtikelRepository extends \Doctrine\ORM\EntityRepository
{
    private $alias = 'art';

    public function createQB(QueryBuilder $queryBuilder = null)
    {
        if (is_null($queryBuilder)) {
            $queryBuilder = $this->createQueryBuilder($this->alias);
            $queryBuilder = $queryBuilder->innerJoin("$this->alias.kategoriNews", "kategoriNews");
        }

        return $queryBuilder;
    }

    public function query(QueryBuilder $queryBuilder = null)
    {
        $queryBuilder = $this->createQB($queryBuilder);

        return $queryBuilder;
    }

    public function queryAktif(QueryBuilder $queryBuilder = null)
    {
        $queryBuilder = $this->createQB($queryBuilder);

        return $queryBuilder->andWhere($queryBuilder->expr()->eq($this->alias . '.aktif', ':aktif'))
            ->setParameter(':aktif', true);
    }

    public function queryMarkForBlast(QueryBuilder $queryBuilder = null)
    {
        $queryBuilder = $this->createQB($queryBuilder);

        return $queryBuilder->andWhere($queryBuilder->expr()->eq("$this->alias.markForBlast", ':markForBlast'))
            ->setParameter(':markForBlast', true);
    }

    public function queryByKategoriId($kategoriNewsId, QueryBuilder $queryBuilder = null)
    {
        $queryBuilder = $this->createQB($queryBuilder);

        return $queryBuilder
            ->andWhere($queryBuilder->expr()->eq($this->alias . '.kategoriNews', ':kategoriNewsId'))
            ->setParameter(':kategoriNewsId', $kategoriNewsId);
    }

    public function queryBySlugKategoriNews($slugKategoriNews, QueryBuilder $queryBuilder = null)
    {
        $queryBuilder = $this->createQB($queryBuilder);

        return $queryBuilder
            ->andWhere($queryBuilder->expr()->eq("kategoriNews.slug", ':slugKategoriNews'))
            ->setParameter(':slugKategoriNews', $slugKategoriNews);
    }

    public function queryBySlug($slug, QueryBuilder $queryBuilder = null)
    {
        $queryBuilder = $this->createQB($queryBuilder);

        return $queryBuilder
            ->andWhere($queryBuilder->expr()->eq("$this->alias.slug", ':slug'))
            ->setParameter(':slug', $slug);
    }

    public function queryById($id, QueryBuilder $queryBuilder = null)
    {
        $queryBuilder = $this->createQB($queryBuilder);

        return $queryBuilder->andWhere($queryBuilder->expr()->eq($this->alias . '.id', ':id'))
            ->setParameter(':id', $id);
    }

    public function queryOrderByTanggal($order = Criteria::DESC, QueryBuilder $queryBuilder = null)
    {
        $queryBuilder = $this->createQB($queryBuilder);

        return $queryBuilder
            ->addOrderBy($this->alias . '.createdAt', $order);
    }

    public function findAktifBySlugKategoriAndSlug($slugKategori, $slugArtikel)
    {
        $queryBuilder = $this->queryAktif();
        $queryBuilder = $this->queryBySlugKategoriNews($slugKategori, $queryBuilder);
        $queryBuilder = $this->queryBySlug($slugArtikel, $queryBuilder);

        return $queryBuilder->setMaxResults(1)->getQuery()->getOneOrNullResult();
    }
}
